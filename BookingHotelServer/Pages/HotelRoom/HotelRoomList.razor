@page "/hotel-room"
@inject IHotelRoomRepository HotelRoomRepository
@inject IJSRuntime JsRuntime
@inject IFileUpload FileUpload

<div class="row mt-4">
    <div class="col-8">
        <h4 class="card-title text-info">Hotel Room's</h4>
    </div>
    <div class="col-3 offset-1">
        <NavLink href="hootel-room/create" class="btn btn-outline-info form-control">
            Add New Room
        </NavLink>
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Occupancy</th>
                    <th>Rate</th>
                    <th>SqFt.</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @if (HotelRooms.Any())
                {
                    @foreach (HotelRoomDTO hotelRoom in HotelRooms)
                    {
                        <tr>
                            <td>@hotelRoom.Name</td>
                            <td>@hotelRoom.Occupancy</td>
                            <td>@hotelRoom.RegularRate.ToString("c")</td>
                            <td>@hotelRoom.SqFt</td>
                            <td width="15%">
                                <NavLink href="@($"/hotel-room/edit/{hotelRoom.Id}")" class="btn btn-outline-info">Edit</NavLink>
                                <button class="btn btn-outline-danger" @onclick="()=>HandleDelete(hotelRoom.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">There is no room to show!</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
<DeleteConfirmation IsParentComponentProcessing="IsProcessing" ConfirmationChanged="ConfirmDelete_Click"></DeleteConfirmation>

@code {
    private IEnumerable<HotelRoomDTO> HotelRooms{ get; set; }=new List<HotelRoomDTO>();
    private int? DeleteRoomId { get; set; } = null;
    private bool IsDeleteProcessComplete { get; set; } = false;
    private bool IsProcessing { get; set; } = false;
    protected override async  Task OnInitializedAsync()
    {
        HotelRooms = await HotelRoomRepository.GetAllHotelRooms();
    }

    private async Task HandleDelete(int roomId)
    {
        DeleteRoomId = roomId;
        await JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;
        if (isConfirmed && DeleteRoomId!=null)
        {
            HotelRoomDTO hotelRoom = await HotelRoomRepository.GetHotelRoom(DeleteRoomId.Value);
            foreach (var image in hotelRoom.HotelRoomImages)
            {
                var imageName = image.RoomImageUrl.Replace($"RoomImages/", "");
                FileUpload.DeleteFile(imageName);
            }
            await HotelRoomRepository.DeleteHotelRoom(DeleteRoomId.Value);
            JsRuntime.SwAlert("success", "Hotel Room deleted successfully");
            HotelRooms = await HotelRoomRepository.GetAllHotelRooms();
            await JsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
            IsProcessing = false;
        }
        else
        {
            IsProcessing = false;
            await JsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
    }


}
